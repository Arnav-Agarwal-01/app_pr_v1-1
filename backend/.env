# =================================================================
# COLLEGE EVENT MANAGEMENT SYSTEM - ENVIRONMENT CONFIGURATION
# =================================================================
# 
# This file contains environment-specific configuration for the
# backend server. These variables control database connections,
# security settings, and server behavior.
# 
# SECURITY WARNING: This file contains sensitive information.
# Never commit this file to version control in production!
# =================================================================

# =================================================================
# DATABASE CONFIGURATION
# =================================================================
# MongoDB connection string for the development database
# Currently configured for local MongoDB instance
# 
# Local MongoDB format: mongodb://localhost:27017/database_name
# 
# Components explained:
# - mongodb://: MongoDB connection protocol
# - localhost:27017: Local MongoDB server (default port 27017)
# - college-events-dev: Database name for development environment
# 
# For MongoDB Atlas (cloud), use format:
# mongodb+srv://username:password@cluster.mongodb.net/database?options
MONGODB_URI=mongodb://localhost:27017/college-events-dev

# Database name (used for logging and connection verification)
# This should match the database name in the MONGODB_URI
DB_NAME=college-events-dev

# =================================================================
# JWT (JSON Web Token) CONFIGURATION
# =================================================================
# Secret key used to sign and verify JWT tokens for authentication
# CRITICAL: Use a strong, unique secret in production (minimum 32 characters)
# Generate with: node -e "console.log(require('crypto').randomBytes(32).toString('hex'))"
JWT_SECRET=dev-jwt-secret-key-change-in-production-2024

# JWT token expiration time
# Format: number + unit (s=seconds, m=minutes, h=hours, d=days)
# 45d = 45 days (adjust based on security requirements)
# Common values: 15m (15 minutes), 1h (1 hour), 7d (7 days), 30d (30 days)
JWT_EXPIRES_IN=45d

# =================================================================
# SERVER CONFIGURATION
# =================================================================
# Port number for the HTTP server to listen on
# Changed to 4001 to avoid conflicts with other services
# In production, this might be set by the hosting platform
PORT=4001

# Node.js environment mode
# Values: development, staging, production
# Affects logging, error handling, and security features
# - development: Detailed logging, error stack traces, debug info
# - staging: Production-like with some debugging enabled
# - production: Minimal logging, no debug info, optimized performance
NODE_ENV=development

# =================================================================
# CORS (Cross-Origin Resource Sharing) CONFIGURATION
# =================================================================
# URL of the frontend application that's allowed to make requests
# This prevents unauthorized websites from accessing the API
# 
# For React Native Expo development: http://localhost:19006
# For web development: http://localhost:3000
# For production: https://your-domain.com
# 
# Multiple origins can be configured in the server code if needed
FRONTEND_URL=http://localhost:19006

# =================================================================
# RATE LIMITING CONFIGURATION
# =================================================================
# Time window for rate limiting in milliseconds
# 900000ms = 15 minutes (900 seconds * 1000 milliseconds)
# Requests are counted within this time window per IP address
# 
# Common values:
# - 60000 (1 minute) for strict limiting
# - 300000 (5 minutes) for moderate limiting
# - 900000 (15 minutes) for lenient limiting
RATE_LIMIT_WINDOW_MS=900000

# Maximum number of requests allowed per IP within the time window
# 100 requests per 15 minutes = ~6.7 requests per minute
# Adjust based on expected usage patterns:
# - 50-100: Conservative (good for public APIs)
# - 100-500: Moderate (good for authenticated users)
# - 500+: Liberal (good for internal APIs)
RATE_LIMIT_MAX_REQUESTS=100

# =================================================================
# ADDITIONAL CONFIGURATION OPTIONS (for future use)
# =================================================================

# Email service configuration (for notifications, password reset, etc.)
# EMAIL_SERVICE=gmail
# EMAIL_USER=your-email@gmail.com
# EMAIL_PASSWORD=your-app-password
# EMAIL_FROM=College Events <noreply@college-events.com>

# File upload configuration
# MAX_FILE_SIZE=10485760  # 10MB in bytes
# UPLOAD_PATH=./uploads
# ALLOWED_FILE_TYPES=jpg,jpeg,png,pdf,doc,docx

# Redis configuration (for session storage, caching, real-time features)
# REDIS_URL=redis://localhost:6379
# REDIS_PASSWORD=your-redis-password
# REDIS_DB=0

# Logging configuration
# LOG_LEVEL=info  # error, warn, info, debug
# LOG_FILE=./logs/app.log
# LOG_MAX_SIZE=10m
# LOG_MAX_FILES=5

# External API keys (for third-party services)
# GOOGLE_MAPS_API_KEY=your-google-maps-key
# FIREBASE_SERVER_KEY=your-firebase-server-key
# TWILIO_ACCOUNT_SID=your-twilio-sid
# TWILIO_AUTH_TOKEN=your-twilio-token

# Security headers configuration
# HELMET_CSP_DIRECTIVES=default-src 'self'
# HELMET_HSTS_MAX_AGE=31536000
# HELMET_REFERRER_POLICY=same-origin

# Session configuration (if using sessions instead of JWT)
# SESSION_SECRET=your-session-secret
# SESSION_MAX_AGE=86400000  # 24 hours in milliseconds
# SESSION_SECURE=false  # Set to true in production with HTTPS

# =================================================================
# DEVELOPMENT NOTES
# =================================================================
# 
# 1. LOCAL MONGODB SETUP:
#    - Install MongoDB locally: https://docs.mongodb.com/manual/installation/
#    - Start MongoDB service: brew services start mongodb/brew/mongodb-community
#    - Or use MongoDB Compass for GUI management
# 
# 2. ENVIRONMENT FILES:
#    - .env (current file) - for local development
#    - .env.example - template for other developers
#    - .env.staging - for staging environment
#    - .env.production - for production environment
# 
# 3. SECURITY BEST PRACTICES:
#    - Never commit .env files with real credentials to version control
#    - Use strong passwords and secrets in production
#    - Regularly rotate secrets and API keys
#    - Use environment variable management services in production
# 
# 4. PORT CONFIGURATION:
#    - Frontend (Expo): 19006
#    - Backend (Express): 4001
#    - MongoDB: 27017 (default)
#    - Redis: 6379 (default, if used)
# 
# 5. TESTING THE CONFIGURATION:
#    - Run: npm run backend:dev
#    - Check: http://localhost:4001/health
#    - Verify: MongoDB connection in console logs
# 
# =================================================================