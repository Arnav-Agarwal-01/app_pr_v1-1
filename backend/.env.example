# =================================================================
# COLLEGE EVENT MANAGEMENT SYSTEM - ENVIRONMENT TEMPLATE
# =================================================================
# 
# This is a template file for environment configuration.
# Copy this file to .env and fill in your actual values.
# 
# INSTRUCTIONS:
# 1. Copy this file: cp .env.example .env
# 2. Replace all placeholder values with your actual configuration
# 3. Never commit the .env file to version control
# 
# =================================================================

# =================================================================
# DATABASE CONFIGURATION
# =================================================================
# Choose ONE of the following MongoDB configurations:

# OPTION 1: MongoDB Atlas (Cloud) - Recommended for production
# Replace username, password, and cluster details with your MongoDB Atlas credentials
# Get connection string from: MongoDB Atlas Dashboard > Connect > Connect your application
MONGODB_URI=mongodb+srv://username:password@cluster.mongodb.net/college-events?retryWrites=true&w=majority

# OPTION 2: Local MongoDB - Good for development
# Uncomment the line below if using local MongoDB
# MONGODB_URI=mongodb://localhost:27017/college-events-dev

# Database name (should match the database name in MONGODB_URI)
DB_NAME=college-events

# =================================================================
# JWT (JSON Web Token) CONFIGURATION
# =================================================================
# CRITICAL: Generate a strong, unique secret key for production
# Use this command to generate a secure secret:
# node -e "console.log(require('crypto').randomBytes(32).toString('hex'))"
# 
# Example strong secret: a1b2c3d4e5f6789012345678901234567890abcdef1234567890abcdef123456
JWT_SECRET=your-super-secret-jwt-key-change-this-in-production

# JWT token expiration time
# Common values: 15m, 1h, 24h, 7d, 30d
# Balance security (shorter) vs user experience (longer)
JWT_EXPIRES_IN=45d

# =================================================================
# SERVER CONFIGURATION
# =================================================================
# Port for the HTTP server
# Common ports: 3000, 4000, 5000, 8000
# Make sure this port is available and not used by other services
PORT=5000

# Node.js environment
# Values: development, staging, production
# This affects logging, error handling, and performance optimizations
NODE_ENV=development

# =================================================================
# CORS (Cross-Origin Resource Sharing) CONFIGURATION
# =================================================================
# Frontend application URL that's allowed to access this API
# 
# Development examples:
# - React Native Expo: http://localhost:19006
# - React Web App: http://localhost:3000
# - Vue.js App: http://localhost:8080
# 
# Production examples:
# - https://your-app.com
# - https://college-events.kmit.edu
FRONTEND_URL=http://localhost:19006

# =================================================================
# RATE LIMITING CONFIGURATION
# =================================================================
# Time window in milliseconds for counting requests
# 900000ms = 15 minutes
# Adjust based on your API usage patterns
RATE_LIMIT_WINDOW_MS=900000

# Maximum requests per IP within the time window
# 100 requests per 15 minutes = ~6.7 requests per minute
# Adjust based on expected user behavior
RATE_LIMIT_MAX_REQUESTS=100

# =================================================================
# OPTIONAL CONFIGURATIONS (uncomment and configure as needed)
# =================================================================

# Email Service Configuration (for notifications, password reset)
# EMAIL_SERVICE=gmail
# EMAIL_USER=your-email@gmail.com
# EMAIL_PASSWORD=your-app-specific-password
# EMAIL_FROM=College Events <noreply@your-domain.com>

# File Upload Configuration
# MAX_FILE_SIZE=10485760  # 10MB in bytes
# UPLOAD_PATH=./uploads
# ALLOWED_FILE_TYPES=jpg,jpeg,png,pdf,doc,docx

# Redis Configuration (for caching, sessions, real-time features)
# REDIS_URL=redis://localhost:6379
# REDIS_PASSWORD=your-redis-password
# REDIS_DB=0

# External API Keys
# GOOGLE_MAPS_API_KEY=your-google-maps-api-key
# FIREBASE_SERVER_KEY=your-firebase-server-key
# TWILIO_ACCOUNT_SID=your-twilio-account-sid
# TWILIO_AUTH_TOKEN=your-twilio-auth-token

# Logging Configuration
# LOG_LEVEL=info  # error, warn, info, debug
# LOG_FILE=./logs/app.log
# LOG_MAX_SIZE=10m
# LOG_MAX_FILES=5

# Security Configuration
# HELMET_CSP_DIRECTIVES=default-src 'self'
# HELMET_HSTS_MAX_AGE=31536000
# HELMET_REFERRER_POLICY=same-origin

# =================================================================
# ENVIRONMENT-SPECIFIC EXAMPLES
# =================================================================

# DEVELOPMENT ENVIRONMENT
# NODE_ENV=development
# MONGODB_URI=mongodb://localhost:27017/college-events-dev
# JWT_SECRET=dev-secret-key-not-for-production
# PORT=4001
# FRONTEND_URL=http://localhost:19006

# STAGING ENVIRONMENT
# NODE_ENV=staging
# MONGODB_URI=mongodb+srv://staging-user:password@cluster.mongodb.net/college-events-staging
# JWT_SECRET=staging-secret-key-different-from-production
# PORT=5000
# FRONTEND_URL=https://staging.college-events.com

# PRODUCTION ENVIRONMENT
# NODE_ENV=production
# MONGODB_URI=mongodb+srv://prod-user:strong-password@cluster.mongodb.net/college-events-prod
# JWT_SECRET=super-strong-production-secret-key-32-chars-minimum
# PORT=5000
# FRONTEND_URL=https://college-events.kmit.edu

# =================================================================
# SETUP CHECKLIST
# =================================================================
# 
# □ Copy this file to .env
# □ Set up MongoDB (local or Atlas)
# □ Generate strong JWT secret
# □ Configure correct port numbers
# □ Set appropriate CORS origin
# □ Test database connection
# □ Verify API endpoints work
# □ Check rate limiting works
# □ Ensure .env is in .gitignore
# 
# =================================================================